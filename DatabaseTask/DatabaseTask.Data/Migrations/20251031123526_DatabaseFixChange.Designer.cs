// <auto-generated />
using System;
using ArtGallery.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtGallery.Data.Migrations
{
    [DbContext(typeof(ArtGalleryDbContext))]
    [Migration("20251031123526_DatabaseFixChange")]
    partial class DatabaseFixChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtGallery.Core.Domain.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfCreation")
                        .HasColumnType("date");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Artwork");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.DisplayDates", b =>
                {
                    b.Property<int>("DisplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisplayId"));

                    b.Property<int?>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExhibitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DisplayId");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("ExhibitId");

                    b.ToTable("DisplayDates");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Exhibit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Curator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("Exhibit");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Artwork", b =>
                {
                    b.HasOne("ArtGallery.Core.Domain.Artist", null)
                        .WithMany("ArtworkID")
                        .HasForeignKey("ArtistId");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.DisplayDates", b =>
                {
                    b.HasOne("ArtGallery.Core.Domain.Artwork", null)
                        .WithMany("DisplayId")
                        .HasForeignKey("ArtworkId");

                    b.HasOne("ArtGallery.Core.Domain.Exhibit", null)
                        .WithMany("DisplayId")
                        .HasForeignKey("ExhibitId");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Exhibit", b =>
                {
                    b.HasOne("ArtGallery.Core.Domain.Gallery", null)
                        .WithMany("ExhibitID")
                        .HasForeignKey("GalleryId");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Artist", b =>
                {
                    b.Navigation("ArtworkID");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Artwork", b =>
                {
                    b.Navigation("DisplayId");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Exhibit", b =>
                {
                    b.Navigation("DisplayId");
                });

            modelBuilder.Entity("ArtGallery.Core.Domain.Gallery", b =>
                {
                    b.Navigation("ExhibitID");
                });
#pragma warning restore 612, 618
        }
    }
}
